{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ITCO\\\\Documents\\\\Personal\\\\Universidad\\\\TCU\\\\LibrosInteractivos\\\\webapp\\\\src\\\\components\\\\ListExample\\\\ListExample.js\";\nimport React, { useEffect, useState } from 'react';\nimport BTable from 'react-bootstrap/Table';\nimport { useTable } from 'react-table';\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../constants/apiContants';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport axios from 'axios';\n/* \r\n    Este componente EJEMPLO usa la tabla de react-bootstrap para mostrar los datos ejemplo que provienen de una llamada al servidor,\r\n    se puede ver como el resultado de esta llamada se guarda en el State que usa tabla para alimentarse.\r\n*/\n\nfunction ListExample(props) {\n  const [showloadingMessageResult, setShowloadingMessage] = useState(false);\n  const [loadedMessage, setLoadedMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    setLoadedMessage('');\n    setShowloadingMessage(false);\n    setLoading(true);\n    axios.get(API_BASE_URL + '/list', {\n      headers: {\n        'Authorization': localStorage.getItem(ACCESS_TOKEN_NAME)\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        setList(response.data);\n      } else {\n        setLoadedMessage('Error loading list');\n        setShowloadingMessage(true);\n        setList([]);\n      }\n    }).catch(function (error) {\n      setLoadedMessage('Error loading list');\n      setShowloadingMessage(true);\n      setList([]);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  const renderSpinner = () => {\n    return loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-container text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"grow\",\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    })) : '';\n  };\n\n  const memoColumns = React.useMemo(() => [{\n    Header: 'Atributo 1',\n    accessor: 'attr1'\n  }, {\n    Header: 'Atributo 2',\n    accessor: 'attr2'\n  }, {\n    Header: 'Atributo 3',\n    accessor: 'attr3'\n  }, {\n    Header: 'Atributo 4',\n    accessor: 'attr4'\n  }], []);\n\n  function Table({\n    columns,\n    data\n  }) {\n    const {\n      getTableProps,\n      headerGroups,\n      rows,\n      prepareRow\n    } = useTable({\n      columns,\n      data\n    });\n    return /*#__PURE__*/React.createElement(BTable, Object.assign({\n      striped: true,\n      bordered: true,\n      hover: true,\n      size: \"sm\"\n    }, getTableProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, rows.map((row, i) => {\n      prepareRow(row);\n      return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }), row.cells.map(cell => {\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }\n        }), cell.render('Cell'));\n      }));\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, renderSpinner(), /*#__PURE__*/React.createElement(Alert, {\n    className: \"loading-list\",\n    variant: \"danger\",\n    dismissible: true,\n    show: showloadingMessageResult,\n    onClick: () => setShowloadingMessage(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Alert.Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, loadedMessage)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: memoColumns,\n    data: list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default ListExample;","map":{"version":3,"sources":["C:/Users/ITCO/Documents/Personal/Universidad/TCU/LibrosInteractivos/webapp/src/components/ListExample/ListExample.js"],"names":["React","useEffect","useState","BTable","useTable","ACCESS_TOKEN_NAME","API_BASE_URL","Alert","Spinner","axios","ListExample","props","showloadingMessageResult","setShowloadingMessage","loadedMessage","setLoadedMessage","loading","setLoading","list","setList","get","headers","localStorage","getItem","then","response","status","data","catch","error","finally","renderSpinner","memoColumns","useMemo","Header","accessor","Table","columns","getTableProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable } from 'react-table'\r\n\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../constants/apiContants'\r\nimport { Alert, Spinner } from 'react-bootstrap';\r\nimport axios from 'axios'\r\n\r\n/* \r\n    Este componente EJEMPLO usa la tabla de react-bootstrap para mostrar los datos ejemplo que provienen de una llamada al servidor,\r\n    se puede ver como el resultado de esta llamada se guarda en el State que usa tabla para alimentarse.\r\n*/\r\nfunction ListExample(props) {\r\n  const [showloadingMessageResult, setShowloadingMessage] = useState(false)\r\n  const [loadedMessage, setLoadedMessage] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [list, setList] = useState([])\r\n\r\n  useEffect(() => {\r\n    setLoadedMessage('')\r\n    setShowloadingMessage(false)\r\n    setLoading(true)\r\n    axios.get(API_BASE_URL + '/list', { headers: { 'Authorization': localStorage.getItem(ACCESS_TOKEN_NAME) } })\r\n      .then(function (response) {\r\n        if (response.status === 200) {          \r\n          setList(response.data)\r\n        } else {\r\n          setLoadedMessage('Error loading list')\r\n          setShowloadingMessage(true)\r\n          setList([])\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setLoadedMessage('Error loading list')\r\n        setShowloadingMessage(true)\r\n        setList([])\r\n      }).finally(() => {\r\n        setLoading(false)\r\n      })\r\n  }, [])\r\n\r\n  const renderSpinner = () => {\r\n    return loading ? (\r\n      <div className=\"spinner-container text-center\">\r\n        <Spinner animation=\"grow\" variant=\"info\" />\r\n      </div>\r\n    ) : ('')\r\n  }\r\n\r\n  const memoColumns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Atributo 1',\r\n        accessor: 'attr1',\r\n      },\r\n      {\r\n        Header: 'Atributo 2',\r\n        accessor: 'attr2',\r\n      },\r\n      {\r\n        Header: 'Atributo 3',\r\n        accessor: 'attr3',\r\n      },\r\n      {\r\n        Header: 'Atributo 4',\r\n        accessor: 'attr4',\r\n      }       \r\n    ],\r\n    []\r\n  )\r\n\r\n  function Table({ columns, data }) {\r\n    const { getTableProps, headerGroups, rows, prepareRow } = useTable({\r\n      columns,\r\n      data,\r\n    })\r\n    return (\r\n      <BTable striped bordered hover size=\"sm\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.render('Header')}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {renderSpinner()}\r\n      <Alert className=\"loading-list\" variant=\"danger\" dismissible show={showloadingMessageResult} onClick={() => setShowloadingMessage(false)}>\r\n        <Alert.Heading>{loadedMessage}</Alert.Heading>\r\n      </Alert>\r\n      <div className=\"mt-3\">\r\n        <Table columns={memoColumns} data={list} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ListExample;"]},"metadata":{},"sourceType":"module"}